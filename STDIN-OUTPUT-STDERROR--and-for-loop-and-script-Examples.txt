==================================================================================
                        Day-16 Session
==================================================================================
   STDIN/STDOUT/STDERR handling Operator 
==================================================================================
1- ;
2- |
==================================================================================

3-  >     ==> it can store the output of any command into any file. OR Overwriting Symbol
4-  >>    ==> it can append the data into any existing file without data overwriting.
==================================================================================
  Alternate  ==> tee and  tee  -a
==================================================================================

STDIN/STDOUT/STDERR

1- STDOUT    ==> > and >> ==> It is only use to store any correct output without any errors OR with out any warning messages on the screen.
2- STDERR    ==> 2> and 2>>  ==> it is use to store errors OR warning messages into any file.

3- STDIN     ==> --stdin  ==> standard Input  ==> it is used to take input from the keyboard automatically on the screen

==================================================================================

  &>
  &>>    ===>   error and output both  ==> as it is 

==================================================================================


/dev/null  ==> Blank ==> Nothing will store in this file 


==================================================================================

&>  /dev/null
&>> /dev/null
>  /dev/null
>>  /dev/null
2>  /dev/null
2>>  /dev/null 

==================================================================================
2>&1    ===> 
==================================================================================  
==================================================================================
          
Examples of stdout and stderr symbols ?

> and  >>    ===> Correct output Store without any error mesg

2> and 2>>   ===> Error Store

==================================================================================

[root@localhost ~]# history 
    1  lsblk 
    2  lsblk  > /tmp/info 
    3  cat  /tmp/info 
    4  date >>  /tmp/info 
    5  cat  /tmp/info 
    6  echo hello india >> /tmp/info 
    7  cat /tmp/info >  /tmp/backup  
    8  > /tmp/info 
    9  cat  /tmp/info 
   10  rm -f /tmp/info 


   12  lsblk | tee  /tmp/info 
   13  cat /tmp/info 
   14  date | tee -a  /tmp/info 
   15  cat /tmp/info 

[root@localhost ~]# find /etc -name passwd 
/etc/pam.d/passwd
/etc/passwd
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# useradd sachin 
[root@localhost ~]# su -  sachin 
[sachin@localhost ~]$ 

    5  find  /etc  -name passwd 
    6  find  /etc  -name passwd >  /tmp/output
    7  cat /tmp/output 
    8  find  /etc -name group
    9  find  /etc -name group  >>  /tmp/output 
   10  cat /tmp/output 
   11  find  /etc  -name passwd 
   12  find  /etc  -name passwd   2> /tmp/error 
   13  cat /tmp/error 
   14  find  /etc -name group
   15  find  /etc -name group  2>>  /tmp/error 
   16  cat /tmp/error 
   17  du -sh /tmp/error 
   18  find  /etc  -name passwd   2>  /dev/null
   19  cat /dev/null
   20  find  /etc  -name passwd  >  /dev/null 
   21  cat /dev/null
   22  find  /etc  -name passwd
   23  find  /etc  -name passwd  &> /tmp/allinone
   24  cat /tmp/allinone 
   25  find  /etc  -name group  &>> /tmp/allinone
   26  cat  /tmp/allinone 
   27  find  /etc  -name passwd  >  /tmp/output 2> /tmp/error  
   28  find  /etc  -name group  >>  /tmp/output 2>> /tmp/error  
   29  cat /tmp/output 
   30  cat /tmp/error 
   31  find  /etc  -name passwd  &> /tmp/allinone
   32  find  /etc  -name group  &>>  /tmp/allinone 
   33  find  /etc  -name passwd 2> /dev/null 
   34  find  /etc  -name passwd > /dev/null 
   35  find  /etc  -name group  &>>  /dev/null 
   36  find  /etc  -name useradd
   37  find  /etc  -name useradd 2>  /dev/null 
   38  find  /etc  -name useradd 2> /tmp/error 
   39  find  /etc  -name useradd >  /dev/null 
   40  find  /etc  -name useradd >  /tmp/output 
   41  cat /tmp/output 
[sachin@localhost ~]$ find  /  -name useradd
[sachin@localhost ~]$ find  /  -name useradd | less
[sachin@localhost ~]$ find  /  -name useradd  2>&1  |  less 
[sachin@localhost ~]$ 
[sachin@localhost ~]$ exit
logout
[root@localhost ~]# 
[root@localhost ~]# vim  hello.sh
date
cal
echo hello wolcome

:wq!

[root@localhost ~]# sh   hello.sh
Mon Jul  7 09:51:13 AM IST 2025
      July 2025     
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31      
                    
hello wolcome
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh 
bash: ./hello.sh: Permission denied
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh 
bash: ./hello.sh: Permission denied
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh  2>  /dev/null 
[root@localhost ~]# 
[root@localhost ~]# ls -l   hello.sh 
-rw-r--r--. 1 root root 28 Jul  7 09:51 hello.sh
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# chmod  +x hello.sh 
[root@localhost ~]# 
[root@localhost ~]# ls -l   hello.sh 
-rwxr-xr-x. 1 root root 28 Jul  7 09:51 hello.sh
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh 
Mon Jul  7 09:52:54 AM IST 2025
      July 2025     
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31      
                    
hello wolcome
[root@localhost ~]# 

==========================================================

Types of Command Execution method ?


1- Manual Method 

2- Job Automation OR command Schedule   ===> using crontab 

==========================================================

1- using command line ===> On the terminal 

2- using script file 
==========================================================


Method:-1 using command line on the terminal




[root@localhost ~]# date 
Mon Jul  7 09:57:07 AM IST 2025
[root@localhost ~]# 
[root@localhost ~]# cal
      July 2025     
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31      
                    
[root@localhost ~]# 
[root@localhost ~]# echo hello india 
hello india
[root@localhost ~]# 


==================================================================================

Method-2  using Script file OR BASH Script file OR Shell Script OR shell Scripting  ===> collection of one or more command to perform any task

Linux  ==> It is an open source kernel.  
       ===> It is a heart of Operating system  ===> OS  ===> set of items ===> complete OS

==================================================================================

Linux OS  ===> Kernel + Shell + Application or binary OR drivers + library


What is Operating System ?

An operating system (OS) is essential system software that manages a computer's hardware and software resources, acting as an intermediary between the user and the computer. 


What is Shell in Linux ?

A shell is a program that acts as an interface between a user and the kernel. It allows a user to give commands to the kernel and receive responses from it

What is Kernel ?

The Linux kernel is the main component of a Linux operating system (OS) and is the core interface between a computer's hardware and its 

What is Application/Software/Tools  ?


What is script file  ?

Shell scripting is a text file with a list of commands that instruct an operating system to perform certain tasks.

Script ===> linux based commands + Programming logic  ==> to get any custom solution OR automated solution

==================================================================================
hello.sh  ===> bash script
hello.py  ===> python
hello.pl  ===> perl 
==================================================================================
[root@localhost ~]# rpm -qa bash
bash-5.1.8-4.el9.x86_64
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# rpm -qa kernel 
kernel-5.14.0-70.13.1.el9_0.x86_64
[root@localhost ~]# 
[root@localhost ~]# which bash
/usr/bin/bash
[root@localhost ~]# 
[root@localhost ~]# ls /
afs  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
[root@localhost ~]# 
[root@localhost ~]# ls -ld  /bin 
lrwxrwxrwx. 1 root root 7 Aug 10  2021 /bin -> usr/bin
[root@localhost ~]# 

==================================================================================

How we can create any Script ?



[root@localhost ~]# vim  hello.sh 

                 OR

[root@localhost ~]# vim  hello 



Section-1   header OR shebang     #!/bin/bash

Section-2   Commented Lines OR you can pass any comment to understand program need  [Optional]

Section-3   Program body  OR set of command 



:wq!

==================================================================================
==================================================================================

[root@localhost ~]# vim  hello.sh 

                 OR

[root@localhost ~]# vim  hello 


#!/bin/bash
# this is my first script

date
cal
echo hello wolcome


:wq!

[root@localhost ~]# sh  hello.sh 
Mon Jul  7 10:19:47 AM IST 2025
      July 2025     
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31      
                    
hello wolcome
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# ./hello.sh

Permission Denied 


[root@localhost ~]# chmod  +x hello.sh 
[root@localhost ~]# 
[root@localhost ~]# ls -l  hello.sh 
-rwxr-xr-x. 1 root root 79 Jul  7 10:19 hello.sh
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh 

Mon Jul  7 10:19:59 AM IST 2025
      July 2025     
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31      
                    
hello wolcome

==========================================================================

Examples of STDIN Operator 


[root@localhost ~]# useradd rakesh
[root@localhost ~]# 
[root@localhost ~]# passwd rakesh
Changing password for user rakesh.
New password: 
BAD PASSWORD: The password is shorter than 8 characters
Retype new password: 
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# echo 123 |  passwd  --stdin  rakesh
Changing password for user rakesh.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# useradd monika
[root@localhost ~]# 
[root@localhost ~]# echo redhat  |  passwd monika  --stdin 
Changing password for user monika.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 

[root@localhost ~]# abc=krishna
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# echo $abc
krishna
[root@localhost ~]# 


==========================================================================

1- STDIN
2- STDOUT
2- STDERR

on the terminal  ?

==========================================================================

1- STDIN
2- STDOUT
2- STDERR

in the bash script file   ?


==========================================================================

1- Command  ===> 1- Manually   2- Schedule  using crontab
2- Script   ===> 1- Manually   2- Schedule  using crontab

==========================================================================

Types of Quotes  ?

1- Single             ===>  '   '

2- Double Quotes      ===>  "   "

3- Back Quotes        ===>  `   `  OR  $()

==========================================================================

$abc     ===> variable value  ==> print Examples

$(date)  ===> linux based command ==> output ===> print  

==========================================================================

Fixed Varibale ?

Dynamic Variable ?  using read command 

==========================================================================

# vim hello.sh 

#!/bin/bash
abc=krishna
echo your name is = $abc


:wq!

[root@localhost ~]# sh  hello.sh 
your name is = krishna
[root@localhost ~]# 
[root@localhost ~]# vim hello.sh



#!/bin/bash
echo  "What is your name please type using keyboard"
read abc
echo your name is = $abc

:wq!


[root@localhost ~]# sh  hello.sh 
What is your name please type using keyboard
raj
your name is = raj
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# sh  hello.sh 
What is your name please type using keyboard
deepak
your name is = deepak
[root@localhost ~]# 
[root@localhost ~]# vim hello.sh


#!/bin/bash
read -p "What is your name please type using keyboard: " abc
echo your name is = $abc


:wq!


[root@localhost ~]# sh  hello.sh 
What is your name please type using keyboard: krishna
your name is = krishna
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# vim   hello.sh 

#!/bin/bash
a=100
b=200
add=$(expr $a + $b)
echo "sum of $a and $b is = $add"

:wq!

[root@localhost ~]# sh    hello.sh 
sum of 100 and 200 is = 300
[root@localhost ~]# 

[root@localhost ~]# vim   hello.sh 

#!/bin/bash
read -p "give any first number value: " a
read -p "give any second number value: " b
add=$(expr $a + $b)
echo "sum of $a and $b is = $add"

:wq!

[root@localhost ~]# sh    hello.sh 
give any first number value: 300
give any second number value: 400
sum of 300 and 400 is = 700
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# sh    hello.sh 
give any first number value: 20
give any second number value: 10
sum of 20 and 10 is = 30
[root@localhost ~]# 
[root@localhost ~]# expr 10 + 20
30
[root@localhost ~]# 
[root@localhost ~]# expr 100 - 20
80
[root@localhost ~]# 
[root@localhost ~]# expr 100 / 20
5
[root@localhost ~]# 
[root@localhost ~]# expr 100 * 20
expr: syntax error: unexpected argument ‘anaconda-ks.cfg’
[root@localhost ~]# 
[root@localhost ~]# expr 100 \* 20
2000
[root@localhost ~]# 

==========================================================================

How we can add any user using script  ?


[root@localhost ~]# grep sachin /etc/passwd
sachin:x:1007:1007::/home/sachin:/bin/bash
[root@localhost ~]# 
[root@localhost ~]# grep sachin /etc/passwd | cut -d: -f1 
sachin
[root@localhost ~]# 



[root@localhost ~]# vim adding.sh  

#!/bin/bash
read -p "give your username want to add: " a 
b=$(grep $a  /etc/passwd | cut -d: -f1)
if [ "$a" = "$b" ]
then    
       echo  "$a user already exist in this machine"
else    
        useradd $a
        echo redhat | passwd --stdin $a
        echo "$a user has been sucessfully created"
fi      


:wq!



[root@localhost ~]# sh  adding.sh  
give your username want to add: sachin
sachin user already exist in this machine
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# sh  adding.sh  
give your username want to add: dhoni
Changing password for user dhoni.
passwd: all authentication tokens updated successfully.
dhoni user has been sucessfully created
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /home
deep  deepak  dhoni  monika  rakesh  ram  ravi1  ravi2  sachin  soniya  student  user1  user2
[root@localhost ~]# 
[root@localhost ~]# grep dhoni  /etc/passwd
dhoni:x:1012:1012::/home/dhoni:/bin/bash
[root@localhost ~]# 
[root@localhost ~]# grep dhoni  /etc/group
dhoni:x:1012:
[root@localhost ~]# 
[root@localhost ~]# grep dhoni  /etc/shadow
dhoni:$6$iDSwsfvFFNfNeIBV$.suo5nJs3JhFM9rXqmF38.YeoU1Ai4HgxTKBixuHr3nfTUoHSQrCY57/G63x7hrYIkCUBhjpsprCxeopPAFL0.:20276:0:99999:7:::
[root@localhost ~]# 




==========================================================================
How we can create Ping Test Script  ?
==========================================================================

How we can create for loop  ?


[root@localhost ~]# echo  hello india
hello india
[root@localhost ~]# echo  hello india
hello india
[root@localhost ~]# 
[root@localhost ~]# echo  hello india
hello india
[root@localhost ~]# 
[root@localhost ~]# echo  hello india
hello india
[root@localhost ~]# 
[root@localhost ~]# echo  hello india
hello india
[root@localhost ~]# date 
Mon Jul  7 10:54:06 AM IST 2025
[root@localhost ~]# date 
Mon Jul  7 10:54:06 AM IST 2025
[root@localhost ~]# date 
Mon Jul  7 10:54:06 AM IST 2025
[root@localhost ~]# date 
Mon Jul  7 10:54:07 AM IST 2025
[root@localhost ~]# date 
Mon Jul  7 10:54:07 AM IST 2025
[root@localhost ~]# 

for i in 1 2 3 4 5 
> do
> echo hello india
> done


hello india
hello india
hello india
hello india
hello india
[root@localhost ~]# 
[root@localhost ~]# 


[root@localhost ~]# for i in {1..5}
> do
> echo hello india
> sleep 3 
> echo Today is $(date +%A)
> done



hello india
Today is Monday
hello india
Today is Monday
hello india
Today is Monday
hello india
Today is Monday
hello india
Today is Monday
[root@localhost ~]# 


[root@localhost ~]# for i in {1..5}
> do
> useradd linux$i
> echo redhat |  passwd  --stdin linux$i
> done
Changing password for user linux1.
passwd: all authentication tokens updated successfully.
Changing password for user linux2.
passwd: all authentication tokens updated successfully.
Changing password for user linux3.
passwd: all authentication tokens updated successfully.
Changing password for user linux4.
passwd: all authentication tokens updated successfully.
Changing password for user linux5.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /home  
deep    dhoni   linux2  linux4  monika  ram    ravi2   soniya   user1
deepak  linux1  linux3  linux5  rakesh  ravi1  sachin  student  user2
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# for i in {1..5}
> do
> userdel -rf linux$i
> done
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /home  
deep  deepak  dhoni  monika  rakesh  ram  ravi1  ravi2  sachin  soniya  student  user1  user2
[root@localhost ~]# 

[root@localhost ~]# vim /tmp/username 
ravi
kumar
sharma
deepu
dinesh
kapil
gopesh


:wq!

[root@localhost ~]# for i in  $(cat /tmp/username)
> do
> useradd $i
> echo $i | passwd  --stdin  $i
> done
Changing password for user ravi.
passwd: all authentication tokens updated successfully.
Changing password for user kumar.
passwd: all authentication tokens updated successfully.
Changing password for user sharma.
passwd: all authentication tokens updated successfully.
Changing password for user deepu.
passwd: all authentication tokens updated successfully.
Changing password for user dinesh.
passwd: all authentication tokens updated successfully.
Changing password for user kapil.
passwd: all authentication tokens updated successfully.
Changing password for user gopesh.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# for i in  $(cat /tmp/username)
> do
> userdel -rf $i
> done

[root@localhost ~]# 
[root@localhost ~]# 



====================================================================================
Exit Status 


$?    ==> It is used to check status of just last command whether it is successfully executed or not ?



# echo $?

zero      ===> means command successfully executed
non zero  ===> means we have something errors

0- 255  ==>  linux fixed error code 


[root@localhost ~]# 
[root@localhost ~]# ls 
adding.sh  anaconda-ks.cfg  Desktop  Documents  Downloads  hello.sh  Music  Pictures  Public  Templates  test.sh  Videos
[root@localhost ~]# 
[root@localhost ~]# echo $?
0
[root@localhost ~]# 
[root@localhost ~]# lsss
bash: lsss: command not found...

Failed to search for file: /mnt/BaseOS was not found
[root@localhost ~]# 
[root@localhost ~]# echo $?
127
[root@localhost ~]# ./test.sh 
bash: ./test.sh: Permission denied
[root@localhost ~]# 
[root@localhost ~]# echo $?
126
[root@localhost ~]# 

====================================================================================
====================================================================================


   93  ifconfig 
   94  nmcli connection up ens160 
   95  ifconfig 
[root@localhost ~]# ifconfig 
ens160: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.248.130  netmask 255.255.255.0  broadcast 192.168.248.255
        inet6 fe80::20c:29ff:fe89:7bb7  prefixlen 64  scopeid 0x20<link>
        ether 00:0c:29:89:7b:b7  txqueuelen 1000  (Ethernet)
        RX packets 7019  bytes 2318021 (2.2 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1647  bytes 116476 (113.7 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 28  bytes 2866 (2.7 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 28  bytes 2866 (2.7 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

[root@localhost ~]# ping 192.168.248.130
PING 192.168.248.130 (192.168.248.130) 56(84) bytes of data.
64 bytes from 192.168.248.130: icmp_seq=1 ttl=64 time=1.19 ms
64 bytes from 192.168.248.130: icmp_seq=2 ttl=64 time=0.043 ms
64 bytes from 192.168.248.130: icmp_seq=3 ttl=64 time=0.043 ms
^C
--- 192.168.248.130 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2016ms
rtt min/avg/max/mdev = 0.043/0.426/1.192/0.541 ms
[root@localhost ~]# 
[root@localhost ~]# ping -c 1  192.168.248.130
PING 192.168.248.130 (192.168.248.130) 56(84) bytes of data.
64 bytes from 192.168.248.130: icmp_seq=1 ttl=64 time=0.033 ms

--- 192.168.248.130 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.033/0.033/0.033/0.000 ms
[root@localhost ~]# 
[root@localhost ~]# vim test.sh 


#!/bin/bash
for i in 192.168.248.{125..132}
do
        ping -c 1 $i > /dev/null

        if [ $? -eq 0 ]
        then
                echo "$i is UP"
        else
                echo  "$i is DOWN"
        fi
done


:wq

[root@localhost ~]# sh  test.sh 
192.168.248.125 is DOWN
192.168.248.126 is DOWN
192.168.248.127 is DOWN
192.168.248.128 is DOWN
192.168.248.129 is DOWN
192.168.248.130 is UP
192.168.248.131 is DOWN
192.168.248.132 is DOWN
[root@localhost ~]# 
[root@localhost ~]# 



==============================================================================

1- What is the use of STDIN STDOUT and STDERR
2- What is the use of EXIT Status ?
3- Fixed variable and dynamic variable
4- For loop
5- if condition
6- read command examples
7- Scripting Create and Examples
8- Quotes ==>  ''    ""     ``
===============================================================================
===============================================================================











